import { push, peek, pop } from '../src/heap.js';

describe('push()', () => {
  test.each([
    [[], 22, [, 22]],
    [[, 22], 5, [, 22, 5]],
    [[, 22, 5], 15, [, 22, 5, 15]],
    [[, 22, 5, 15], 28, [, 28, 22, 15, 5]],
    [[, 28, 22, 15, 5], 3, [, 28, 22, 15, 5, 3]],
    [[, 28, 22, 15, 5, 3], 44, [, 44, 22, 28, 5, 3, 15]],
    [[, 44, 22, 28, 5, 3, 15], 4, [, 44, 22, 28, 5, 3, 15, 4]],
    [[, 44, 22, 28, 5, 3, 15, 4], 19, [, 44, 22, 28, 19, 3, 15, 4, 5]],
    [[, 44, 22, 28, 19, 3, 15, 4, 5], 36, [, 44, 36, 28, 22, 3, 15, 4, 5, 19]],
    [[, 44, 36, 28, 22, 3, 15, 4, 5, 19], 99, [, 99, 44, 28, 22, 36, 15, 4, 5, 19, 3]],
  ])('heap: %p, insert: %d maintains max heap', (heap, item, expected) => {
    const result = push(heap, item);
    expect(result).toEqual(expected);
  });
});

describe('peek()', () => {
  test.each([
    [[], undefined],
    [[, 22], 22],
    [[, 19, 5], 19],
    [[, 17, 5, 15], 17],
    [[, 34, 22, 15, 5], 34],
    [[, 94, 22, 15, 5, 3], 94],
    [[, 1222, 22, 28, 5, 3, 15], 1222],
    [[, 75, 22, 28, 5, 3, 15, 4], 75],
    [[, 29, 22, 28, 19, 3, 15, 4, 5], 29],
    [[, 43, 36, 28, 22, 3, 15, 4, 5, 19], 43],
  ])('heap: %p, returns: :%s', (heap, expected) => {
    const result = peek(heap);
    expect(result).toBe(expected);
  });
});

describe('pop()', () => {
  test.each([
    [[], []],
    [
      [, 43, 36, 28, 22, 3, 15, 4, 5, 19],
      [, 36, 22, 28, 19, 3, 15, 4, 5],
    ],
    [
      [, 36, 22, 28, 19, 3, 15, 4, 5],
      [, 28, 22, 15, 19, 3, 5, 4],
    ],
    [
      [, 28, 22, 15, 19, 3, 5, 4],
      [, 22, 19, 15, 4, 3, 5],
    ],
    [
      [, 22, 19, 15, 4, 3, 5],
      [, 19, 5, 15, 4, 3],
    ],
    [
      [, 19, 5, 15, 4, 3],
      [, 15, 5, 3, 4],
    ],
    [
      [, 15, 5, 3, 4],
      [, 5, 4, 3],
    ],
    [
      [, 5, 4, 3],
      [, 4, 3],
    ],
    [
      [, 4, 3],
      [, 3],
    ],
    [[, 3], []],
  ])('heap: %p, returns: %p', (heap, expected) => {
    const result = pop(heap);
    expect(result).toEqual(expected);
  });
});
