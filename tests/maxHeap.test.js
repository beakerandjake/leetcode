import { maxHeap } from '../src/heap.js';

describe('push()', () => {
  test.each([
    [[], 3, 3],
    [[3], 5, 5],
    [[3, 5], 22, 22],
    [[3, 5, 22], 28, 28],
    [[3, 5, 22, 28], 6, 28],
    [[3, 5, 22, 28, 6], 44, 44],
    [[3, 5, 22, 28, 6, 44], 19, 44],
    [[3, 5, 22, 28, 6, 44, 19], 57, 57],
    [[3, 5, 22, 28, 6, 44, 19, 57], 88, 88],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88], 17, 88],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88, 17], 122, 122],
  ])('heap: %p, insert: %d, max is: %d', (items, newItem, max) => {
    const heap = maxHeap(items);
    heap.push(newItem);
    expect(heap.peek()).toEqual(max);
  });
});

describe('peek()', () => {
  test.each([
    [[], undefined],
    [[3, 5], 5],
    [[3, 5, 22], 22],
    [[3, 5, 22, 28], 28],
    [[3, 5, 22, 28, 6], 28],
    [[3, 5, 22, 28, 6, 44], 44],
    [[3, 5, 22, 28, 6, 44, 19], 44],
    [[3, 5, 22, 28, 6, 44, 19, 57], 57],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88], 88],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88, 17, 122], 122],
  ])('heap: %p, returns: %s', (items, max) => {
    const heap = maxHeap(items);
    expect(heap.peek()).toBe(max);
  });
});

describe('pop()', () => {
  test.each([
    [[], undefined],
    [[3], 3],
    [[3, 5], 5],
    [[3, 5, 6], 6],
    [[3, 5, 6, 19], 19],
    [[3, 5, 22, 6, 19], 22],
    [[3, 5, 22, 28, 6, 19], 28],
    [[3, 5, 22, 28, 6, 44, 19], 44],
    [[3, 5, 22, 28, 6, 44, 19, 57], 57],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88], 88],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88, 17, 122], 122],
  ])('heap: %p, returns: %s', (items, max) => {
    const heap = maxHeap(items);
    expect(heap.pop()).toBe(max);
  });
});

describe('update()', () => {
  test.each([
    [[], 6, 7, undefined],
    [[3], 3, 5, 5],
    [[3, 5], 5, 1, 3],
    [[3, 5, 6], 3, 96, 96],
    [[3, 5, 6, 19], 6, 12, 19],
    [[3, 5, 22, 6, 19], 22, 46, 46],
    [[3, 5, 22, 28, 6, 19], 6, 3, 28],
    [[3, 5, 22, 28, 6, 44, 19], 19, 45, 45],
    [[3, 5, 22, 28, 6, 44, 19, 57], 3, 8, 57],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88], 44, 155, 155],
    [[3, 5, 22, 28, 6, 44, 19, 57, 88, 17, 122], 88, 120, 122],
  ])('heap: %p, update: %d to %d, max is: %s', (items, toUpdate, newValue, max) => {
    const heap = maxHeap(items);
    heap.update(toUpdate, newValue);
    expect(heap.peek()).toBe(max);
  });
});
