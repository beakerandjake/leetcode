import { push, pop, peek, update } from '../src/minHeap.js';

describe('push()', () => {
  test.each([
    [[], 22, [, 22]],
    [[, 22], 5, [, 5, 22]],
    [[, 5, 22], 15, [, 5, 22, 15]],
    [[, 5, 22, 15], 28, [, 5, 22, 15, 28]],
    [[, 5, 22, 15, 28], 3, [, 3, 5, 15, 28, 22]],
    [[, 3, 5, 15, 28, 22], 44, [, 3, 5, 15, 28, 22, 44]],
    [[, 3, 5, 15, 28, 22, 44], 4, [, 3, 5, 4, 28, 22, 44, 15]],
    [[, 3, 5, 4, 28, 22, 44, 15], 19, [, 3, 5, 4, 19, 22, 44, 15, 28]],
    [[, 3, 5, 4, 19, 22, 44, 15, 28], 36, [, 3, 5, 4, 19, 22, 44, 15, 28, 36]],
    [[, 3, 5, 4, 19, 22, 44, 15, 28, 36], 99, [, 3, 5, 4, 19, 22, 44, 15, 28, 36, 99]],
  ])('heap: %p, insert: %d maintains max heap', (heap, item, expected) => {
    const result = push(heap, item);
    expect(result).toEqual(expected);
  });
});

describe('peek()', () => {
  test.each([
    [[], undefined],
    [[, 22], 22],
    [[, 5, 22], 5],
    [[, 5, 22, 15], 5],
    [[, 10, 22, 15, 28], 10],
    [[, 4, 5, 15, 28, 22], 4],
    [[, 3, 5, 15, 28, 22, 44], 3],
    [[, 3, 5, 4, 28, 22, 44, 15], 3],
    [[, 3, 5, 4, 19, 22, 44, 15, 28], 3],
    [[, 3, 5, 4, 19, 22, 44, 15, 28, 36], 3],
  ])('heap: %p, returns: :%s', (heap, expected) => {
    const result = peek(heap);
    expect(result).toBe(expected);
  });
});

// describe('pop()', () => {
//   test.each([
//     [[], []],
//     [
//       [, 43, 36, 28, 22, 3, 15, 4, 5, 19],
//       [, 36, 22, 28, 19, 3, 15, 4, 5],
//     ],
//     [
//       [, 36, 22, 28, 19, 3, 15, 4, 5],
//       [, 28, 22, 15, 19, 3, 5, 4],
//     ],
//     [
//       [, 28, 22, 15, 19, 3, 5, 4],
//       [, 22, 19, 15, 4, 3, 5],
//     ],
//     [
//       [, 22, 19, 15, 4, 3, 5],
//       [, 19, 5, 15, 4, 3],
//     ],
//     [
//       [, 19, 5, 15, 4, 3],
//       [, 15, 5, 3, 4],
//     ],
//     [
//       [, 15, 5, 3, 4],
//       [, 5, 4, 3],
//     ],
//     [
//       [, 5, 4, 3],
//       [, 4, 3],
//     ],
//     [
//       [, 4, 3],
//       [, 3],
//     ],
//     [[, 3], []],
//   ])('heap: %p, returns: %p', (heap, expected) => {
//     const result = pop(heap);
//     expect(result).toEqual(expected);
//   });
// });

// describe('update()', () => {
//   test.each([
//     [[, 43, 36, 28, 22, 3, 15, 4, 5, 19], 1, 24, [, 36, 24, 28, 22, 3, 15, 4, 5, 19]],
//     [[, 36, 24, 28, 22, 3, 15, 4, 5, 19], 2, 7, [, 36, 22, 28, 19, 3, 15, 4, 5, 7]],
//     [[, 36, 22, 28, 19, 3, 15, 4, 5, 7], 3, 32, [, 36, 22, 32, 19, 3, 15, 4, 5, 7]],
//     [[, 36, 22, 32, 19, 3, 15, 4, 5, 7], 4, 10, [, 36, 22, 32, 10, 3, 15, 4, 5, 7]],
//     [[, 36, 22, 32, 10, 3, 15, 4, 5, 7], 5, 87, [, 87, 36, 32, 10, 22, 15, 4, 5, 7]],
//     [[, 87, 36, 32, 10, 22, 15, 4, 5, 7], 6, 2, [, 87, 36, 32, 10, 22, 2, 4, 5, 7]],
//     [[, 87, 36, 32, 10, 22, 2, 4, 5, 7], 7, 17, [, 87, 36, 32, 10, 22, 2, 17, 5, 7]],
//     [[, 87, 36, 32, 10, 22, 2, 17, 5, 7], 8, 12, [, 87, 36, 32, 12, 22, 2, 17, 10, 7]],
//     [
//       [, 87, 36, 32, 12, 22, 2, 17, 10, 7],
//       9,
//       137,
//       [, 137, 87, 32, 36, 22, 2, 17, 10, 12],
//     ],
//   ])(
//     'heap: %p, update index: %d to priority: %d, returns: %p',
//     (heap, index, priority, expected) => {
//       const result = update(heap, index, priority);
//       expect(result).toEqual(expected);
//     }
//   );
// });
