import { push, pop, peek, update } from '../src/minHeap.js';

describe('push()', () => {
  test.each([
    [[], 22, [, 22]],
    [[, 22], 5, [, 5, 22]],
    [[, 5, 22], 15, [, 5, 22, 15]],
    [[, 5, 22, 15], 28, [, 5, 22, 15, 28]],
    [[, 5, 22, 15, 28], 3, [, 3, 5, 15, 28, 22]],
    [[, 3, 5, 15, 28, 22], 44, [, 3, 5, 15, 28, 22, 44]],
    [[, 3, 5, 15, 28, 22, 44], 4, [, 3, 5, 4, 28, 22, 44, 15]],
    [[, 3, 5, 4, 28, 22, 44, 15], 19, [, 3, 5, 4, 19, 22, 44, 15, 28]],
    [[, 3, 5, 4, 19, 22, 44, 15, 28], 36, [, 3, 5, 4, 19, 22, 44, 15, 28, 36]],
    [[, 3, 5, 4, 19, 22, 44, 15, 28, 36], 99, [, 3, 5, 4, 19, 22, 44, 15, 28, 36, 99]],
  ])('heap: %p, insert: %d maintains max heap', (heap, item, expected) => {
    const result = push(heap, item);
    expect(result).toEqual(expected);
  });
});

describe('peek()', () => {
  test.each([
    [[], undefined],
    [[, 22], 22],
    [[, 5, 22], 5],
    [[, 5, 22, 15], 5],
    [[, 10, 22, 15, 28], 10],
    [[, 4, 5, 15, 28, 22], 4],
    [[, 3, 5, 15, 28, 22, 44], 3],
    [[, 3, 5, 4, 28, 22, 44, 15], 3],
    [[, 3, 5, 4, 19, 22, 44, 15, 28], 3],
    [[, 3, 5, 4, 19, 22, 44, 15, 28, 36], 3],
  ])('heap: %p, returns: :%s', (heap, expected) => {
    const result = peek(heap);
    expect(result).toBe(expected);
  });
});

describe('pop()', () => {
  test.each([
    [[], []],
    [
      [, 3, 5, 4, 19, 22, 44, 15, 28, 36],
      [, 4, 5, 15, 19, 22, 44, 36, 28],
    ],
    [
      [, 4, 5, 15, 19, 22, 44, 36, 28],
      [, 5, 19, 15, 28, 22, 44, 36],
    ],
    [
      [, 5, 19, 15, 28, 22, 44, 36],
      [, 15, 19, 36, 28, 22, 44],
    ],
    [
      [, 15, 19, 36, 28, 22, 44],
      [, 19, 22, 36, 28, 44],
    ],
    [
      [, 19, 22, 36, 28, 44],
      [, 22, 28, 36, 44],
    ],
    [
      [, 22, 28, 36, 44],
      [, 28, 44, 36],
    ],
    [
      [, 28, 44, 36],
      [, 36, 44],
    ],
    [
      [, 36, 44],
      [, 44],
    ],
    [[, 44], []],
  ])('heap: %p, returns: %p', (heap, expected) => {
    const result = pop(heap);
    expect(result).toEqual(expected);
  });
});

describe('update()', () => {
  test.each([
    [[, 3, 5, 4, 19, 22, 44, 15, 28, 36], 1, 24, [, 4, 5, 15, 19, 22, 44, 24, 28, 36]],
    [[, 4, 5, 15, 19, 22, 44, 24, 28, 36], 2, 7, [, 4, 7, 15, 19, 22, 44, 24, 28, 36]],
    [[, 4, 7, 15, 19, 22, 44, 24, 28, 36], 3, 32, [, 4, 7, 24, 19, 22, 44, 32, 28, 36]],
    [[, 4, 7, 24, 19, 22, 44, 32, 28, 36], 4, 10, [, 4, 7, 24, 10, 22, 44, 32, 28, 36]],
    [[, 4, 7, 24, 10, 22, 44, 32, 28, 36], 5, 87, [, 4, 7, 24, 10, 87, 44, 32, 28, 36]],
    [[, 4, 7, 24, 10, 87, 44, 32, 28, 36], 6, 2, [, 2, 7, 4, 10, 87, 24, 32, 28, 36]],
    [[, 2, 7, 4, 10, 87, 24, 32, 28, 36], 7, 17, [, 2, 7, 4, 10, 87, 24, 17, 28, 36]],
    [[, 2, 7, 4, 10, 87, 24, 17, 28, 36], 8, 12, [, 2, 7, 4, 10, 87, 24, 17, 12, 36]],
    [[, 2, 7, 4, 10, 87, 24, 17, 12, 36], 9, 137, [, 2, 7, 4, 10, 87, 24, 17, 12, 137]],
  ])(
    'heap: %p, update index: %d to priority: %d, returns: %p',
    (heap, index, priority, expected) => {
      const result = update(heap, index, priority);
      expect(result).toEqual(expected);
    }
  );
});
